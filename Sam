
Practical no: 3
Code:
// SPDX-License-Identifier: GPL-3.0
pragma solidity <0.9.0;
contract Bank{
address public owner;
mapping (address => uint256) private userbalance;
constructor() {
owner = msg.sender;
}
modifier onlyOwner() {
require(msg.sender == owner, 'you are not the owner of this contract');
_;
}
function deposite() public payable returns (bool){
require(msg.value > 10 wei, 'please deposite at least 10 wei');
userbalance[msg.sender] += msg.value;
return true;
}
function withdraw(uint256 _amount) public payable returns (bool){
require(_amount <= userbalance[msg.sender], 'you dont have sufficient funds');
userbalance[msg.sender] -= _amount;
payable (msg.sender).transfer(_amount);
return true;
}
function getbalance () public view returns (uint256){
return userbalance[msg.sender];
}
function getcontractbalance() public view onlyOwner returns (uint256){
return address(this).balance;
}
function withdrawfunds(uint256 _amount) public payable onlyOwner returns (bool){
payable (owner).transfer(_amount);
return true;
}
}



Practical no: 4
Code
// SPDX-License-Identifier: GPL-3.0
pragma solidity <0.9.0;
contract Crud {
struct User {
uint id;
string name;
}
User[] public users;
uint public nextId = 0;
function Create(string memory name) public {
users.push(User(nextId, name));
nextId++;
}
function Read(uint id) view public returns(uint, string memory) {
for(uint i=0; i<users.length; i++) {
if(users[i].id == id) {
return(users[i].id, users[i].name);
}
}
revert("User does not exist");
}
function Update(uint id, string memory name) public {
for(uint i=0; i<users.length; i++) {
if(users[i].id == id) {
users[i].name =name;
}
}
}
function Delete(uint id) public {
delete users[id];
}
function find(uint id) view internal returns(uint) {
for(uint i=0; i< users.length; i++) {
if(users[i].id == id) {
return i;
}
}
// if user does not exist then revert back
revert("User does not exist");
}
}
